// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STARTUP_AIMM_STARTUP_H_
#define FLATBUFFERS_GENERATED_STARTUP_AIMM_STARTUP_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace aimm {
namespace startup {

struct StartupInfo;
struct StartupInfoBuilder;
struct StartupInfoT;

struct PumpStatus;
struct PumpStatusBuilder;
struct PumpStatusT;

struct BoatDepth;
struct BoatDepthBuilder;
struct BoatDepthT;

struct ValveStates;
struct ValveStatesBuilder;
struct ValveStatesT;

struct AIMMData;
struct AIMMDataBuilder;
struct AIMMDataT;

inline const ::flatbuffers::TypeTable *StartupInfoTypeTable();

inline const ::flatbuffers::TypeTable *PumpStatusTypeTable();

inline const ::flatbuffers::TypeTable *BoatDepthTypeTable();

inline const ::flatbuffers::TypeTable *ValveStatesTypeTable();

inline const ::flatbuffers::TypeTable *AIMMDataTypeTable();

struct StartupInfoT : public ::flatbuffers::NativeTable {
  typedef StartupInfo TableType;
  bool finish_startup = false;
  std::string time_of_startup{};
};

struct StartupInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StartupInfoT NativeTableType;
  typedef StartupInfoBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return StartupInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FINISH_STARTUP = 4,
    VT_TIME_OF_STARTUP = 6
  };
  bool finish_startup() const {
    return GetField<uint8_t>(VT_FINISH_STARTUP, 0) != 0;
  }
  bool mutate_finish_startup(bool _finish_startup = 0) {
    return SetField<uint8_t>(VT_FINISH_STARTUP, static_cast<uint8_t>(_finish_startup), 0);
  }
  const ::flatbuffers::String *time_of_startup() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME_OF_STARTUP);
  }
  ::flatbuffers::String *mutable_time_of_startup() {
    return GetPointer<::flatbuffers::String *>(VT_TIME_OF_STARTUP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FINISH_STARTUP, 1) &&
           VerifyOffset(verifier, VT_TIME_OF_STARTUP) &&
           verifier.VerifyString(time_of_startup()) &&
           verifier.EndTable();
  }
  StartupInfoT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StartupInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<StartupInfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StartupInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StartupInfoBuilder {
  typedef StartupInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_finish_startup(bool finish_startup) {
    fbb_.AddElement<uint8_t>(StartupInfo::VT_FINISH_STARTUP, static_cast<uint8_t>(finish_startup), 0);
  }
  void add_time_of_startup(::flatbuffers::Offset<::flatbuffers::String> time_of_startup) {
    fbb_.AddOffset(StartupInfo::VT_TIME_OF_STARTUP, time_of_startup);
  }
  explicit StartupInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StartupInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StartupInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StartupInfo> CreateStartupInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool finish_startup = false,
    ::flatbuffers::Offset<::flatbuffers::String> time_of_startup = 0) {
  StartupInfoBuilder builder_(_fbb);
  builder_.add_time_of_startup(time_of_startup);
  builder_.add_finish_startup(finish_startup);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StartupInfo> CreateStartupInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool finish_startup = false,
    const char *time_of_startup = nullptr) {
  auto time_of_startup__ = time_of_startup ? _fbb.CreateString(time_of_startup) : 0;
  return aimm::startup::CreateStartupInfo(
      _fbb,
      finish_startup,
      time_of_startup__);
}

::flatbuffers::Offset<StartupInfo> CreateStartupInfo(::flatbuffers::FlatBufferBuilder &_fbb, const StartupInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PumpStatusT : public ::flatbuffers::NativeTable {
  typedef PumpStatus TableType;
  float pressure = 0.0f;
};

struct PumpStatus FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PumpStatusT NativeTableType;
  typedef PumpStatusBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PumpStatusTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRESSURE = 4
  };
  float pressure() const {
    return GetField<float>(VT_PRESSURE, 0.0f);
  }
  bool mutate_pressure(float _pressure = 0.0f) {
    return SetField<float>(VT_PRESSURE, _pressure, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_PRESSURE, 4) &&
           verifier.EndTable();
  }
  PumpStatusT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PumpStatusT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PumpStatus> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PumpStatusT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PumpStatusBuilder {
  typedef PumpStatus Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pressure(float pressure) {
    fbb_.AddElement<float>(PumpStatus::VT_PRESSURE, pressure, 0.0f);
  }
  explicit PumpStatusBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PumpStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PumpStatus>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PumpStatus> CreatePumpStatus(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float pressure = 0.0f) {
  PumpStatusBuilder builder_(_fbb);
  builder_.add_pressure(pressure);
  return builder_.Finish();
}

::flatbuffers::Offset<PumpStatus> CreatePumpStatus(::flatbuffers::FlatBufferBuilder &_fbb, const PumpStatusT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct BoatDepthT : public ::flatbuffers::NativeTable {
  typedef BoatDepth TableType;
  float depth = 0.0f;
};

struct BoatDepth FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoatDepthT NativeTableType;
  typedef BoatDepthBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BoatDepthTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEPTH = 4
  };
  float depth() const {
    return GetField<float>(VT_DEPTH, 0.0f);
  }
  bool mutate_depth(float _depth = 0.0f) {
    return SetField<float>(VT_DEPTH, _depth, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_DEPTH, 4) &&
           verifier.EndTable();
  }
  BoatDepthT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BoatDepthT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<BoatDepth> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BoatDepthT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BoatDepthBuilder {
  typedef BoatDepth Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_depth(float depth) {
    fbb_.AddElement<float>(BoatDepth::VT_DEPTH, depth, 0.0f);
  }
  explicit BoatDepthBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BoatDepth> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BoatDepth>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BoatDepth> CreateBoatDepth(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float depth = 0.0f) {
  BoatDepthBuilder builder_(_fbb);
  builder_.add_depth(depth);
  return builder_.Finish();
}

::flatbuffers::Offset<BoatDepth> CreateBoatDepth(::flatbuffers::FlatBufferBuilder &_fbb, const BoatDepthT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ValveStatesT : public ::flatbuffers::NativeTable {
  typedef ValveStates TableType;
  bool valve1 = false;
  bool valve2 = false;
  bool valve3 = false;
  bool valve4 = false;
  bool valve5 = false;
  bool valve6 = false;
};

struct ValveStates FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ValveStatesT NativeTableType;
  typedef ValveStatesBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ValveStatesTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALVE1 = 4,
    VT_VALVE2 = 6,
    VT_VALVE3 = 8,
    VT_VALVE4 = 10,
    VT_VALVE5 = 12,
    VT_VALVE6 = 14
  };
  bool valve1() const {
    return GetField<uint8_t>(VT_VALVE1, 0) != 0;
  }
  bool mutate_valve1(bool _valve1 = 0) {
    return SetField<uint8_t>(VT_VALVE1, static_cast<uint8_t>(_valve1), 0);
  }
  bool valve2() const {
    return GetField<uint8_t>(VT_VALVE2, 0) != 0;
  }
  bool mutate_valve2(bool _valve2 = 0) {
    return SetField<uint8_t>(VT_VALVE2, static_cast<uint8_t>(_valve2), 0);
  }
  bool valve3() const {
    return GetField<uint8_t>(VT_VALVE3, 0) != 0;
  }
  bool mutate_valve3(bool _valve3 = 0) {
    return SetField<uint8_t>(VT_VALVE3, static_cast<uint8_t>(_valve3), 0);
  }
  bool valve4() const {
    return GetField<uint8_t>(VT_VALVE4, 0) != 0;
  }
  bool mutate_valve4(bool _valve4 = 0) {
    return SetField<uint8_t>(VT_VALVE4, static_cast<uint8_t>(_valve4), 0);
  }
  bool valve5() const {
    return GetField<uint8_t>(VT_VALVE5, 0) != 0;
  }
  bool mutate_valve5(bool _valve5 = 0) {
    return SetField<uint8_t>(VT_VALVE5, static_cast<uint8_t>(_valve5), 0);
  }
  bool valve6() const {
    return GetField<uint8_t>(VT_VALVE6, 0) != 0;
  }
  bool mutate_valve6(bool _valve6 = 0) {
    return SetField<uint8_t>(VT_VALVE6, static_cast<uint8_t>(_valve6), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALVE1, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALVE2, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALVE3, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALVE4, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALVE5, 1) &&
           VerifyField<uint8_t>(verifier, VT_VALVE6, 1) &&
           verifier.EndTable();
  }
  ValveStatesT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ValveStatesT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ValveStates> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ValveStatesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ValveStatesBuilder {
  typedef ValveStates Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_valve1(bool valve1) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE1, static_cast<uint8_t>(valve1), 0);
  }
  void add_valve2(bool valve2) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE2, static_cast<uint8_t>(valve2), 0);
  }
  void add_valve3(bool valve3) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE3, static_cast<uint8_t>(valve3), 0);
  }
  void add_valve4(bool valve4) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE4, static_cast<uint8_t>(valve4), 0);
  }
  void add_valve5(bool valve5) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE5, static_cast<uint8_t>(valve5), 0);
  }
  void add_valve6(bool valve6) {
    fbb_.AddElement<uint8_t>(ValveStates::VT_VALVE6, static_cast<uint8_t>(valve6), 0);
  }
  explicit ValveStatesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ValveStates> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ValveStates>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ValveStates> CreateValveStates(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool valve1 = false,
    bool valve2 = false,
    bool valve3 = false,
    bool valve4 = false,
    bool valve5 = false,
    bool valve6 = false) {
  ValveStatesBuilder builder_(_fbb);
  builder_.add_valve6(valve6);
  builder_.add_valve5(valve5);
  builder_.add_valve4(valve4);
  builder_.add_valve3(valve3);
  builder_.add_valve2(valve2);
  builder_.add_valve1(valve1);
  return builder_.Finish();
}

::flatbuffers::Offset<ValveStates> CreateValveStates(::flatbuffers::FlatBufferBuilder &_fbb, const ValveStatesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AIMMDataT : public ::flatbuffers::NativeTable {
  typedef AIMMData TableType;
  std::unique_ptr<aimm::startup::StartupInfoT> startup_info{};
  std::unique_ptr<aimm::startup::PumpStatusT> pump_status{};
  std::unique_ptr<aimm::startup::BoatDepthT> boat_depth{};
  std::unique_ptr<aimm::startup::ValveStatesT> valve_states{};
  AIMMDataT() = default;
  AIMMDataT(const AIMMDataT &o);
  AIMMDataT(AIMMDataT&&) FLATBUFFERS_NOEXCEPT = default;
  AIMMDataT &operator=(AIMMDataT o) FLATBUFFERS_NOEXCEPT;
};

struct AIMMData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AIMMDataT NativeTableType;
  typedef AIMMDataBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AIMMDataTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STARTUP_INFO = 4,
    VT_PUMP_STATUS = 6,
    VT_BOAT_DEPTH = 8,
    VT_VALVE_STATES = 10
  };
  const aimm::startup::StartupInfo *startup_info() const {
    return GetPointer<const aimm::startup::StartupInfo *>(VT_STARTUP_INFO);
  }
  aimm::startup::StartupInfo *mutable_startup_info() {
    return GetPointer<aimm::startup::StartupInfo *>(VT_STARTUP_INFO);
  }
  const aimm::startup::PumpStatus *pump_status() const {
    return GetPointer<const aimm::startup::PumpStatus *>(VT_PUMP_STATUS);
  }
  aimm::startup::PumpStatus *mutable_pump_status() {
    return GetPointer<aimm::startup::PumpStatus *>(VT_PUMP_STATUS);
  }
  const aimm::startup::BoatDepth *boat_depth() const {
    return GetPointer<const aimm::startup::BoatDepth *>(VT_BOAT_DEPTH);
  }
  aimm::startup::BoatDepth *mutable_boat_depth() {
    return GetPointer<aimm::startup::BoatDepth *>(VT_BOAT_DEPTH);
  }
  const aimm::startup::ValveStates *valve_states() const {
    return GetPointer<const aimm::startup::ValveStates *>(VT_VALVE_STATES);
  }
  aimm::startup::ValveStates *mutable_valve_states() {
    return GetPointer<aimm::startup::ValveStates *>(VT_VALVE_STATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STARTUP_INFO) &&
           verifier.VerifyTable(startup_info()) &&
           VerifyOffset(verifier, VT_PUMP_STATUS) &&
           verifier.VerifyTable(pump_status()) &&
           VerifyOffset(verifier, VT_BOAT_DEPTH) &&
           verifier.VerifyTable(boat_depth()) &&
           VerifyOffset(verifier, VT_VALVE_STATES) &&
           verifier.VerifyTable(valve_states()) &&
           verifier.EndTable();
  }
  AIMMDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AIMMDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AIMMData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AIMMDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AIMMDataBuilder {
  typedef AIMMData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_startup_info(::flatbuffers::Offset<aimm::startup::StartupInfo> startup_info) {
    fbb_.AddOffset(AIMMData::VT_STARTUP_INFO, startup_info);
  }
  void add_pump_status(::flatbuffers::Offset<aimm::startup::PumpStatus> pump_status) {
    fbb_.AddOffset(AIMMData::VT_PUMP_STATUS, pump_status);
  }
  void add_boat_depth(::flatbuffers::Offset<aimm::startup::BoatDepth> boat_depth) {
    fbb_.AddOffset(AIMMData::VT_BOAT_DEPTH, boat_depth);
  }
  void add_valve_states(::flatbuffers::Offset<aimm::startup::ValveStates> valve_states) {
    fbb_.AddOffset(AIMMData::VT_VALVE_STATES, valve_states);
  }
  explicit AIMMDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AIMMData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AIMMData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AIMMData> CreateAIMMData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<aimm::startup::StartupInfo> startup_info = 0,
    ::flatbuffers::Offset<aimm::startup::PumpStatus> pump_status = 0,
    ::flatbuffers::Offset<aimm::startup::BoatDepth> boat_depth = 0,
    ::flatbuffers::Offset<aimm::startup::ValveStates> valve_states = 0) {
  AIMMDataBuilder builder_(_fbb);
  builder_.add_valve_states(valve_states);
  builder_.add_boat_depth(boat_depth);
  builder_.add_pump_status(pump_status);
  builder_.add_startup_info(startup_info);
  return builder_.Finish();
}

::flatbuffers::Offset<AIMMData> CreateAIMMData(::flatbuffers::FlatBufferBuilder &_fbb, const AIMMDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline StartupInfoT *StartupInfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<StartupInfoT>(new StartupInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void StartupInfo::UnPackTo(StartupInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = finish_startup(); _o->finish_startup = _e; }
  { auto _e = time_of_startup(); if (_e) _o->time_of_startup = _e->str(); }
}

inline ::flatbuffers::Offset<StartupInfo> StartupInfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StartupInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStartupInfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<StartupInfo> CreateStartupInfo(::flatbuffers::FlatBufferBuilder &_fbb, const StartupInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const StartupInfoT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _finish_startup = _o->finish_startup;
  auto _time_of_startup = _o->time_of_startup.empty() ? 0 : _fbb.CreateString(_o->time_of_startup);
  return aimm::startup::CreateStartupInfo(
      _fbb,
      _finish_startup,
      _time_of_startup);
}

inline PumpStatusT *PumpStatus::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PumpStatusT>(new PumpStatusT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PumpStatus::UnPackTo(PumpStatusT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pressure(); _o->pressure = _e; }
}

inline ::flatbuffers::Offset<PumpStatus> PumpStatus::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PumpStatusT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePumpStatus(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PumpStatus> CreatePumpStatus(::flatbuffers::FlatBufferBuilder &_fbb, const PumpStatusT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PumpStatusT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pressure = _o->pressure;
  return aimm::startup::CreatePumpStatus(
      _fbb,
      _pressure);
}

inline BoatDepthT *BoatDepth::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BoatDepthT>(new BoatDepthT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BoatDepth::UnPackTo(BoatDepthT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = depth(); _o->depth = _e; }
}

inline ::flatbuffers::Offset<BoatDepth> BoatDepth::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BoatDepthT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBoatDepth(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<BoatDepth> CreateBoatDepth(::flatbuffers::FlatBufferBuilder &_fbb, const BoatDepthT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const BoatDepthT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _depth = _o->depth;
  return aimm::startup::CreateBoatDepth(
      _fbb,
      _depth);
}

inline ValveStatesT *ValveStates::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ValveStatesT>(new ValveStatesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ValveStates::UnPackTo(ValveStatesT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = valve1(); _o->valve1 = _e; }
  { auto _e = valve2(); _o->valve2 = _e; }
  { auto _e = valve3(); _o->valve3 = _e; }
  { auto _e = valve4(); _o->valve4 = _e; }
  { auto _e = valve5(); _o->valve5 = _e; }
  { auto _e = valve6(); _o->valve6 = _e; }
}

inline ::flatbuffers::Offset<ValveStates> ValveStates::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ValveStatesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateValveStates(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ValveStates> CreateValveStates(::flatbuffers::FlatBufferBuilder &_fbb, const ValveStatesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ValveStatesT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _valve1 = _o->valve1;
  auto _valve2 = _o->valve2;
  auto _valve3 = _o->valve3;
  auto _valve4 = _o->valve4;
  auto _valve5 = _o->valve5;
  auto _valve6 = _o->valve6;
  return aimm::startup::CreateValveStates(
      _fbb,
      _valve1,
      _valve2,
      _valve3,
      _valve4,
      _valve5,
      _valve6);
}

inline AIMMDataT::AIMMDataT(const AIMMDataT &o)
      : startup_info((o.startup_info) ? new aimm::startup::StartupInfoT(*o.startup_info) : nullptr),
        pump_status((o.pump_status) ? new aimm::startup::PumpStatusT(*o.pump_status) : nullptr),
        boat_depth((o.boat_depth) ? new aimm::startup::BoatDepthT(*o.boat_depth) : nullptr),
        valve_states((o.valve_states) ? new aimm::startup::ValveStatesT(*o.valve_states) : nullptr) {
}

inline AIMMDataT &AIMMDataT::operator=(AIMMDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(startup_info, o.startup_info);
  std::swap(pump_status, o.pump_status);
  std::swap(boat_depth, o.boat_depth);
  std::swap(valve_states, o.valve_states);
  return *this;
}

inline AIMMDataT *AIMMData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AIMMDataT>(new AIMMDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AIMMData::UnPackTo(AIMMDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = startup_info(); if (_e) { if(_o->startup_info) { _e->UnPackTo(_o->startup_info.get(), _resolver); } else { _o->startup_info = std::unique_ptr<aimm::startup::StartupInfoT>(_e->UnPack(_resolver)); } } else if (_o->startup_info) { _o->startup_info.reset(); } }
  { auto _e = pump_status(); if (_e) { if(_o->pump_status) { _e->UnPackTo(_o->pump_status.get(), _resolver); } else { _o->pump_status = std::unique_ptr<aimm::startup::PumpStatusT>(_e->UnPack(_resolver)); } } else if (_o->pump_status) { _o->pump_status.reset(); } }
  { auto _e = boat_depth(); if (_e) { if(_o->boat_depth) { _e->UnPackTo(_o->boat_depth.get(), _resolver); } else { _o->boat_depth = std::unique_ptr<aimm::startup::BoatDepthT>(_e->UnPack(_resolver)); } } else if (_o->boat_depth) { _o->boat_depth.reset(); } }
  { auto _e = valve_states(); if (_e) { if(_o->valve_states) { _e->UnPackTo(_o->valve_states.get(), _resolver); } else { _o->valve_states = std::unique_ptr<aimm::startup::ValveStatesT>(_e->UnPack(_resolver)); } } else if (_o->valve_states) { _o->valve_states.reset(); } }
}

inline ::flatbuffers::Offset<AIMMData> AIMMData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AIMMDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAIMMData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AIMMData> CreateAIMMData(::flatbuffers::FlatBufferBuilder &_fbb, const AIMMDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AIMMDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _startup_info = _o->startup_info ? CreateStartupInfo(_fbb, _o->startup_info.get(), _rehasher) : 0;
  auto _pump_status = _o->pump_status ? CreatePumpStatus(_fbb, _o->pump_status.get(), _rehasher) : 0;
  auto _boat_depth = _o->boat_depth ? CreateBoatDepth(_fbb, _o->boat_depth.get(), _rehasher) : 0;
  auto _valve_states = _o->valve_states ? CreateValveStates(_fbb, _o->valve_states.get(), _rehasher) : 0;
  return aimm::startup::CreateAIMMData(
      _fbb,
      _startup_info,
      _pump_status,
      _boat_depth,
      _valve_states);
}

inline const ::flatbuffers::TypeTable *StartupInfoTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "finish_startup",
    "time_of_startup"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *PumpStatusTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "pressure"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *BoatDepthTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "depth"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ValveStatesTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "valve1",
    "valve2",
    "valve3",
    "valve4",
    "valve5",
    "valve6"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *AIMMDataTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    aimm::startup::StartupInfoTypeTable,
    aimm::startup::PumpStatusTypeTable,
    aimm::startup::BoatDepthTypeTable,
    aimm::startup::ValveStatesTypeTable
  };
  static const char * const names[] = {
    "startup_info",
    "pump_status",
    "boat_depth",
    "valve_states"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const aimm::startup::AIMMData *GetAIMMData(const void *buf) {
  return ::flatbuffers::GetRoot<aimm::startup::AIMMData>(buf);
}

inline const aimm::startup::AIMMData *GetSizePrefixedAIMMData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<aimm::startup::AIMMData>(buf);
}

inline AIMMData *GetMutableAIMMData(void *buf) {
  return ::flatbuffers::GetMutableRoot<AIMMData>(buf);
}

inline aimm::startup::AIMMData *GetMutableSizePrefixedAIMMData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<aimm::startup::AIMMData>(buf);
}

inline bool VerifyAIMMDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<aimm::startup::AIMMData>(nullptr);
}

inline bool VerifySizePrefixedAIMMDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<aimm::startup::AIMMData>(nullptr);
}

inline void FinishAIMMDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aimm::startup::AIMMData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAIMMDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<aimm::startup::AIMMData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<aimm::startup::AIMMDataT> UnPackAIMMData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aimm::startup::AIMMDataT>(GetAIMMData(buf)->UnPack(res));
}

inline std::unique_ptr<aimm::startup::AIMMDataT> UnPackSizePrefixedAIMMData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<aimm::startup::AIMMDataT>(GetSizePrefixedAIMMData(buf)->UnPack(res));
}

}  // namespace startup
}  // namespace aimm

#endif  // FLATBUFFERS_GENERATED_STARTUP_AIMM_STARTUP_H_
